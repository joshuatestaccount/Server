/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    datetime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
    /**
     * A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
     */
    email<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "EmailAddress";
    /**
     * A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
     */
    phone<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "PhoneNumber";
    /**
     * The `Upload` scalar type represents a file upload.
     */
    Upload<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Upload";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    datetime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
    /**
     * A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
     */
    email<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "EmailAddress";
    /**
     * A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
     */
    phone<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "PhoneNumber";
    /**
     * The `Upload` scalar type represents a file upload.
     */
    Upload<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Upload";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AddressInput: { // input type
    city?: string | null; // String
    province?: string | null; // String
    street?: string | null; // String
    zipcode?: string | null; // String
  }
  AuthInput: { // input type
    email?: NexusGenScalars['EmailAddress'] | null; // EmailAddress
    password?: string | null; // String
  }
  JobPostInput: { // input type
    description?: string | null; // String
    qualification?: string | null; // String
    responsibilities?: string | null; // String
    title?: string | null; // String
  }
  ProfileInput: { // input type
    birthday?: NexusGenScalars['Date'] | null; // Date
    firstname?: string | null; // String
    lastname?: string | null; // String
    phone?: NexusGenScalars['PhoneNumber'] | null; // PhoneNumber
  }
  commentInput: { // input type
    message?: string | null; // String
    notes?: string | null; // String
  }
  jobDetailsInput: { // input type
    category: string; // String!
    jobType?: string[] | null; // [String!]
    location?: string[] | null; // [String!]
    salary: string; // String!
    workType?: string[] | null; // [String!]
  }
}

export interface NexusGenEnums {
  FilterOderBy: "asc" | "desc"
  applicationStatus: "awaiting" | "contacted" | "hired" | "rejected" | "reviewing" | "reviwed"
  jobStatus: "approved" | "rejected"
  orderedBy: "asc" | "desc"
  roles: "administrator" | "manager" | "moderator" | "recruiter"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
  DateTime: any
  EmailAddress: any
  PhoneNumber: any
  Upload: any
}

export interface NexusGenObjects {
  JobPost: { // root type
    _count?: number | null; // Int
    createdAt?: NexusGenScalars['Date'] | null; // Date
    description?: string | null; // String
    jobPostID?: string | null; // ID
    qualification?: string | null; // String
    responsibilities?: string | null; // String
    status?: string | null; // String
    title?: string | null; // String
    updatedAt?: NexusGenScalars['Date'] | null; // Date
  }
  Mutation: {};
  Query: {};
  Subscription: {};
  address: { // root type
    addressID?: string | null; // ID
    city?: string | null; // String
    province?: string | null; // String
    street?: string | null; // String
    zipcode?: string | null; // String
  }
  application: { // root type
    applicantID?: string | null; // ID
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    email?: NexusGenScalars['EmailAddress'] | null; // EmailAddress
    id?: string | null; // String
    status?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  comment: { // root type
    commentID?: string | null; // ID
    createdAt?: NexusGenScalars['Date'] | null; // Date
    message?: string | null; // String
    notes?: string | null; // String
    updatedAt?: NexusGenScalars['Date'] | null; // Date
  }
  company: { // root type
    companyID?: string | null; // ID
    companyName?: string | null; // String
  }
  company_details: { // root type
    companyDetailsID?: string | null; // ID
    mission?: string | null; // String
    vission?: string | null; // String
  }
  countByGroup: { // root type
    _count?: number | null; // Int
    createdAt?: NexusGenScalars['Date'] | null; // Date
  }
  endorse: { // root type
    createdAt?: NexusGenScalars['Date'] | null; // Date
    endorseID?: string | null; // ID
    endorseStatus?: string | null; // String
  }
  endorsement: { // root type
    Status?: string | null; // String
    createdAt?: NexusGenScalars['Date'] | null; // Date
    endorsementID?: string | null; // ID
    updatedAt?: NexusGenScalars['Date'] | null; // Date
  }
  feedback: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    feedback?: string | null; // String
    feedbackID?: string | null; // ID
  }
  fileUpload: { // root type
    createdAt?: NexusGenScalars['Date'] | null; // Date
    file?: string | null; // String
    uploadFileID?: string | null; // ID
    video?: string | null; // String
  }
  interviewer: { // root type
    createdAt?: NexusGenScalars['Date'] | null; // Date
    interviewerID?: string | null; // ID
  }
  jobDetails: { // root type
    category?: string | null; // String
    jobDetailsID?: string | null; // ID
    jobType?: Array<string | null> | null; // [String]
    location?: Array<string | null> | null; // [String]
    salary?: string | null; // String
    workType?: Array<string | null> | null; // [String]
  }
  logs: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    logsID?: string | null; // ID
    modifiedBy?: string | null; // String
    title?: string | null; // String
  }
  notification: { // root type
    createdAt?: NexusGenScalars['Date'] | null; // Date
    notificationID?: string | null; // ID
    notificationStatus?: string | null; // String
    title?: string | null; // String
  }
  otp: { // root type
    OTPID?: string | null; // ID
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    expiredAt?: NexusGenScalars['DateTime'] | null; // DateTime
    otp?: string | null; // String
  }
  profile: { // root type
    birthday?: NexusGenScalars['Date'] | null; // Date
    firstname?: string | null; // String
    lastname?: string | null; // String
    phone?: NexusGenScalars['PhoneNumber'] | null; // PhoneNumber
    profileID?: string | null; // ID
  }
  screening: { // root type
    screeningID?: string | null; // ID
  }
  token: { // root type
    token?: string | null; // String
  }
  user: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    email?: NexusGenScalars['EmailAddress'] | null; // EmailAddress
    role?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    userID?: string | null; // ID
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  JobPost: { // field return type
    _count: number | null; // Int
    applicants: Array<NexusGenRootTypes['application'] | null> | null; // [application]
    createdAt: NexusGenScalars['Date'] | null; // Date
    description: string | null; // String
    details: Array<NexusGenRootTypes['jobDetails'] | null> | null; // [jobDetails]
    jobPostID: string | null; // ID
    qualification: string | null; // String
    responsibilities: string | null; // String
    status: string | null; // String
    title: string | null; // String
    updatedAt: NexusGenScalars['Date'] | null; // Date
    users: Array<NexusGenRootTypes['user'] | null> | null; // [user]
  }
  Mutation: { // field return type
    changePin: NexusGenRootTypes['user'] | null; // user
    createAFeedback: NexusGenRootTypes['feedback'] | null; // feedback
    createAJobForAMM: NexusGenRootTypes['JobPost'] | null; // JobPost
    createAJobForRecruiter: NexusGenRootTypes['JobPost'] | null; // JobPost
    createAccount: NexusGenRootTypes['user'] | null; // user
    createAdministrator: NexusGenRootTypes['user'] | null; // user
    createApplication: NexusGenRootTypes['application'] | null; // application
    createComment: NexusGenRootTypes['comment'] | null; // comment
    createEndorse: NexusGenRootTypes['endorse'] | null; // endorse
    createInterviewer: NexusGenRootTypes['interviewer'] | null; // interviewer
    createLogs: NexusGenRootTypes['logs'] | null; // logs
    createOTP: NexusGenRootTypes['otp'] | null; // otp
    createScreening: NexusGenRootTypes['screening'] | null; // screening
    deleteComment: NexusGenRootTypes['comment'] | null; // comment
    deleteCompany: NexusGenRootTypes['company'] | null; // company
    deleteJobPost: NexusGenRootTypes['JobPost'] | null; // JobPost
    deleteUser: NexusGenRootTypes['user'] | null; // user
    generateApplicantCSV: Array<NexusGenRootTypes['application'] | null> | null; // [application]
    getDetailsFitlerAndSorting: Array<NexusGenRootTypes['jobDetails'] | null> | null; // [jobDetails]
    getEndorseByCSV: Array<NexusGenRootTypes['endorse'] | null> | null; // [endorse]
    getEndorsmentByCSV: Array<NexusGenRootTypes['endorsement'] | null> | null; // [endorsement]
    login: NexusGenRootTypes['token'] | null; // token
    terminateMyApplication: NexusGenRootTypes['application'] | null; // application
    updateAddressByProfileID: Array<NexusGenRootTypes['address'] | null> | null; // [address]
    updateAllContentUserProfile: NexusGenRootTypes['user'] | null; // user
    updateApplicantStatus: NexusGenRootTypes['application'] | null; // application
    updateEndorse: NexusGenRootTypes['endorse'] | null; // endorse
    updateEndorsement: NexusGenRootTypes['endorsement'] | null; // endorsement
    updateJobPost: NexusGenRootTypes['JobPost'] | null; // JobPost
    updateJobPostStatus: NexusGenRootTypes['JobPost'] | null; // JobPost
    updateNotificationStatus: NexusGenRootTypes['notification'] | null; // notification
    updatePassword: NexusGenRootTypes['user'] | null; // user
    updateProfile: NexusGenRootTypes['profile'] | null; // profile
    updateUserPassword: NexusGenRootTypes['user'] | null; // user
    verifyOTP: NexusGenRootTypes['otp'] | null; // otp
    viewMyApplication: NexusGenRootTypes['token'] | null; // token
  }
  Query: { // field return type
    getAddressQuery: Array<NexusGenRootTypes['address'] | null> | null; // [address]
    getAllApplication: Array<NexusGenRootTypes['application'] | null> | null; // [application]
    getAllApplicationDateCount: Array<NexusGenRootTypes['countByGroup'] | null> | null; // [countByGroup]
    getAllCategories: Array<NexusGenRootTypes['jobDetails'] | null> | null; // [jobDetails]
    getAllCompany: Array<NexusGenRootTypes['company'] | null> | null; // [company]
    getAllCountJob: Array<NexusGenRootTypes['JobPost'] | null> | null; // [JobPost]
    getAllEndorse: Array<NexusGenRootTypes['endorse'] | null> | null; // [endorse]
    getAllEndorsementByGroup: Array<NexusGenRootTypes['countByGroup'] | null> | null; // [countByGroup]
    getAllFeedback: Array<NexusGenRootTypes['feedback'] | null> | null; // [feedback]
    getAllJobPost: Array<NexusGenRootTypes['JobPost'] | null> | null; // [JobPost]
    getAllNotification: Array<NexusGenRootTypes['notification'] | null> | null; // [notification]
    getAllOTP: Array<NexusGenRootTypes['otp'] | null> | null; // [otp]
    getAllUser: Array<NexusGenRootTypes['user'] | null> | null; // [user]
    getApplicantByDWMY: Array<NexusGenRootTypes['countByGroup'] | null> | null; // [countByGroup]
    getApplicantByID: Array<NexusGenRootTypes['application'] | null> | null; // [application]
    getApplicationByStatus: Array<NexusGenRootTypes['application'] | null> | null; // [application]
    getCompanyById: Array<NexusGenRootTypes['company'] | null> | null; // [company]
    getCompanyPartner: Array<NexusGenRootTypes['company'] | null> | null; // [company]
    getEmployerCompany: Array<NexusGenRootTypes['company'] | null> | null; // [company]
    getEmployerCompanyGroup: Array<NexusGenRootTypes['countByGroup'] | null> | null; // [countByGroup]
    getEndorseByID: Array<NexusGenRootTypes['endorse'] | null> | null; // [endorse]
    getEndorseByStatus: Array<NexusGenRootTypes['endorse'] | null> | null; // [endorse]
    getEndorsementAll: Array<NexusGenRootTypes['endorsement'] | null> | null; // [endorsement]
    getEndorsementByDWMY: Array<NexusGenRootTypes['countByGroup'] | null> | null; // [countByGroup]
    getEndorsementById: Array<NexusGenRootTypes['endorsement'] | null> | null; // [endorsement]
    getEndorsementCommnet: Array<NexusGenRootTypes['comment'] | null> | null; // [comment]
    getEndorsementFeedback: Array<NexusGenRootTypes['endorse'] | null> | null; // [endorse]
    getEndorsementSpecificStatus: Array<NexusGenRootTypes['endorsement'] | null> | null; // [endorsement]
    getFindMyLocation: Array<NexusGenRootTypes['jobDetails'] | null> | null; // [jobDetails]
    getGroubyByJob: Array<NexusGenRootTypes['countByGroup'] | null> | null; // [countByGroup]
    getJobByStatus: Array<NexusGenRootTypes['JobPost'] | null> | null; // [JobPost]
    getJobPostById: Array<NexusGenRootTypes['JobPost'] | null> | null; // [JobPost]
    getJobPostDWMY: Array<NexusGenRootTypes['countByGroup'] | null> | null; // [countByGroup]
    getJobPostSearch: Array<NexusGenRootTypes['JobPost'] | null> | null; // [JobPost]
    getJobRelated: Array<NexusGenRootTypes['jobDetails'] | null> | null; // [jobDetails]
    getNotificationByStatus: Array<NexusGenRootTypes['notification'] | null> | null; // [notification]
    getNotificationID: Array<NexusGenRootTypes['notification'] | null> | null; // [notification]
    getSpecificJob: Array<NexusGenRootTypes['jobDetails'] | null> | null; // [jobDetails]
    getUserByID: Array<NexusGenRootTypes['user'] | null> | null; // [user]
    getUserByRoles: Array<NexusGenRootTypes['user'] | null> | null; // [user]
    getUserLogs: Array<NexusGenRootTypes['logs'] | null> | null; // [logs]
    jobQuery: Array<NexusGenRootTypes['JobPost'] | null> | null; // [JobPost]
    profileQuery: Array<NexusGenRootTypes['profile'] | null> | null; // [profile]
    searchApplicantID: Array<NexusGenRootTypes['application'] | null> | null; // [application]
  }
  Subscription: { // field return type
    NotificationSubscriptions: NexusGenRootTypes['notification'] | null; // notification
    UserSubscriptions: NexusGenRootTypes['user'] | null; // user
    createAJobPostSubscriptions: NexusGenRootTypes['JobPost'] | null; // JobPost
    createEndorsementSub: NexusGenRootTypes['endorsement'] | null; // endorsement
  }
  address: { // field return type
    addressID: string | null; // ID
    city: string | null; // String
    profile: Array<NexusGenRootTypes['profile'] | null> | null; // [profile]
    province: string | null; // String
    street: string | null; // String
    zipcode: string | null; // String
  }
  application: { // field return type
    applicantID: string | null; // ID
    applicantInterviewer: Array<NexusGenRootTypes['interviewer'] | null> | null; // [interviewer]
    applicantProfile: Array<NexusGenRootTypes['profile'] | null> | null; // [profile]
    applicantUpload: Array<NexusGenRootTypes['fileUpload'] | null> | null; // [fileUpload]
    applyJobPost: Array<NexusGenRootTypes['JobPost'] | null> | null; // [JobPost]
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    email: NexusGenScalars['EmailAddress'] | null; // EmailAddress
    endorseFeedback: Array<NexusGenRootTypes['feedback'] | null> | null; // [feedback]
    id: string | null; // String
    status: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  comment: { // field return type
    commentID: string | null; // ID
    createdAt: NexusGenScalars['Date'] | null; // Date
    message: string | null; // String
    notes: string | null; // String
    updatedAt: NexusGenScalars['Date'] | null; // Date
    user: Array<NexusGenRootTypes['user'] | null> | null; // [user]
  }
  company: { // field return type
    comapnyDetails: Array<NexusGenRootTypes['company_details'] | null> | null; // [company_details]
    companyID: string | null; // ID
    companyName: string | null; // String
    companyPost: Array<NexusGenRootTypes['JobPost'] | null> | null; // [JobPost]
    endorse: Array<NexusGenRootTypes['endorse'] | null> | null; // [endorse]
    user: Array<NexusGenRootTypes['user'] | null> | null; // [user]
  }
  company_details: { // field return type
    company: Array<NexusGenRootTypes['company'] | null> | null; // [company]
    companyDetailsID: string | null; // ID
    location: Array<NexusGenRootTypes['address'] | null> | null; // [address]
    mission: string | null; // String
    vission: string | null; // String
  }
  countByGroup: { // field return type
    _count: number | null; // Int
    createdAt: NexusGenScalars['Date'] | null; // Date
  }
  endorse: { // field return type
    company: Array<NexusGenRootTypes['company'] | null> | null; // [company]
    createdAt: NexusGenScalars['Date'] | null; // Date
    endorseID: string | null; // ID
    endorseStatus: string | null; // String
    endorsement: Array<NexusGenRootTypes['endorsement'] | null> | null; // [endorsement]
    feedback: Array<NexusGenRootTypes['feedback'] | null> | null; // [feedback]
    user: Array<NexusGenRootTypes['user'] | null> | null; // [user]
  }
  endorsement: { // field return type
    Status: string | null; // String
    applicants: Array<NexusGenRootTypes['application'] | null> | null; // [application]
    company: Array<NexusGenRootTypes['company'] | null> | null; // [company]
    createdAt: NexusGenScalars['Date'] | null; // Date
    endorse: Array<NexusGenRootTypes['endorse'] | null> | null; // [endorse]
    endorseBy: Array<NexusGenRootTypes['user'] | null> | null; // [user]
    endorsementComment: Array<NexusGenRootTypes['comment'] | null> | null; // [comment]
    endorsementID: string | null; // ID
    updatedAt: NexusGenScalars['Date'] | null; // Date
  }
  feedback: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    endorse: Array<NexusGenRootTypes['endorse'] | null> | null; // [endorse]
    feedback: string | null; // String
    feedbackID: string | null; // ID
    user: Array<NexusGenRootTypes['user'] | null> | null; // [user]
  }
  fileUpload: { // field return type
    createdAt: NexusGenScalars['Date'] | null; // Date
    file: string | null; // String
    uploadFileID: string | null; // ID
    video: string | null; // String
  }
  interviewer: { // field return type
    applicants: Array<NexusGenRootTypes['application'] | null> | null; // [application]
    createdAt: NexusGenScalars['Date'] | null; // Date
    interviewerID: string | null; // ID
    user: Array<NexusGenRootTypes['user'] | null> | null; // [user]
  }
  jobDetails: { // field return type
    category: string | null; // String
    jobDetailsID: string | null; // ID
    jobPost: Array<NexusGenRootTypes['JobPost'] | null> | null; // [JobPost]
    jobType: Array<string | null> | null; // [String]
    location: Array<string | null> | null; // [String]
    salary: string | null; // String
    workType: Array<string | null> | null; // [String]
  }
  logs: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    logsID: string | null; // ID
    modifiedBy: string | null; // String
    title: string | null; // String
    users: Array<NexusGenRootTypes['user'] | null> | null; // [user]
  }
  notification: { // field return type
    createdAt: NexusGenScalars['Date'] | null; // Date
    notificationID: string | null; // ID
    notificationJob: Array<NexusGenRootTypes['JobPost'] | null> | null; // [JobPost]
    notificationStatus: string | null; // String
    title: string | null; // String
    user: Array<NexusGenRootTypes['user'] | null> | null; // [user]
    userApplications: Array<NexusGenRootTypes['application'] | null> | null; // [application]
  }
  otp: { // field return type
    OTPID: string | null; // ID
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    expiredAt: NexusGenScalars['DateTime'] | null; // DateTime
    otp: string | null; // String
  }
  profile: { // field return type
    birthday: NexusGenScalars['Date'] | null; // Date
    firstname: string | null; // String
    lastname: string | null; // String
    phone: NexusGenScalars['PhoneNumber'] | null; // PhoneNumber
    profileAddress: Array<NexusGenRootTypes['address'] | null> | null; // [address]
    profileID: string | null; // ID
    user: Array<NexusGenRootTypes['user'] | null> | null; // [user]
  }
  screening: { // field return type
    applicantInterviewed: Array<NexusGenRootTypes['application'] | null> | null; // [application]
    screeningID: string | null; // ID
  }
  token: { // field return type
    token: string | null; // String
  }
  user: { // field return type
    company: Array<NexusGenRootTypes['company'] | null> | null; // [company]
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    email: NexusGenScalars['EmailAddress'] | null; // EmailAddress
    endorsement: Array<NexusGenRootTypes['endorsement'] | null> | null; // [endorsement]
    logs: Array<NexusGenRootTypes['logs'] | null> | null; // [logs]
    notification: Array<NexusGenRootTypes['notification'] | null> | null; // [notification]
    profile: Array<NexusGenRootTypes['profile'] | null> | null; // [profile]
    role: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    userID: string | null; // ID
  }
}

export interface NexusGenFieldTypeNames {
  JobPost: { // field return type name
    _count: 'Int'
    applicants: 'application'
    createdAt: 'Date'
    description: 'String'
    details: 'jobDetails'
    jobPostID: 'ID'
    qualification: 'String'
    responsibilities: 'String'
    status: 'String'
    title: 'String'
    updatedAt: 'Date'
    users: 'user'
  }
  Mutation: { // field return type name
    changePin: 'user'
    createAFeedback: 'feedback'
    createAJobForAMM: 'JobPost'
    createAJobForRecruiter: 'JobPost'
    createAccount: 'user'
    createAdministrator: 'user'
    createApplication: 'application'
    createComment: 'comment'
    createEndorse: 'endorse'
    createInterviewer: 'interviewer'
    createLogs: 'logs'
    createOTP: 'otp'
    createScreening: 'screening'
    deleteComment: 'comment'
    deleteCompany: 'company'
    deleteJobPost: 'JobPost'
    deleteUser: 'user'
    generateApplicantCSV: 'application'
    getDetailsFitlerAndSorting: 'jobDetails'
    getEndorseByCSV: 'endorse'
    getEndorsmentByCSV: 'endorsement'
    login: 'token'
    terminateMyApplication: 'application'
    updateAddressByProfileID: 'address'
    updateAllContentUserProfile: 'user'
    updateApplicantStatus: 'application'
    updateEndorse: 'endorse'
    updateEndorsement: 'endorsement'
    updateJobPost: 'JobPost'
    updateJobPostStatus: 'JobPost'
    updateNotificationStatus: 'notification'
    updatePassword: 'user'
    updateProfile: 'profile'
    updateUserPassword: 'user'
    verifyOTP: 'otp'
    viewMyApplication: 'token'
  }
  Query: { // field return type name
    getAddressQuery: 'address'
    getAllApplication: 'application'
    getAllApplicationDateCount: 'countByGroup'
    getAllCategories: 'jobDetails'
    getAllCompany: 'company'
    getAllCountJob: 'JobPost'
    getAllEndorse: 'endorse'
    getAllEndorsementByGroup: 'countByGroup'
    getAllFeedback: 'feedback'
    getAllJobPost: 'JobPost'
    getAllNotification: 'notification'
    getAllOTP: 'otp'
    getAllUser: 'user'
    getApplicantByDWMY: 'countByGroup'
    getApplicantByID: 'application'
    getApplicationByStatus: 'application'
    getCompanyById: 'company'
    getCompanyPartner: 'company'
    getEmployerCompany: 'company'
    getEmployerCompanyGroup: 'countByGroup'
    getEndorseByID: 'endorse'
    getEndorseByStatus: 'endorse'
    getEndorsementAll: 'endorsement'
    getEndorsementByDWMY: 'countByGroup'
    getEndorsementById: 'endorsement'
    getEndorsementCommnet: 'comment'
    getEndorsementFeedback: 'endorse'
    getEndorsementSpecificStatus: 'endorsement'
    getFindMyLocation: 'jobDetails'
    getGroubyByJob: 'countByGroup'
    getJobByStatus: 'JobPost'
    getJobPostById: 'JobPost'
    getJobPostDWMY: 'countByGroup'
    getJobPostSearch: 'JobPost'
    getJobRelated: 'jobDetails'
    getNotificationByStatus: 'notification'
    getNotificationID: 'notification'
    getSpecificJob: 'jobDetails'
    getUserByID: 'user'
    getUserByRoles: 'user'
    getUserLogs: 'logs'
    jobQuery: 'JobPost'
    profileQuery: 'profile'
    searchApplicantID: 'application'
  }
  Subscription: { // field return type name
    NotificationSubscriptions: 'notification'
    UserSubscriptions: 'user'
    createAJobPostSubscriptions: 'JobPost'
    createEndorsementSub: 'endorsement'
  }
  address: { // field return type name
    addressID: 'ID'
    city: 'String'
    profile: 'profile'
    province: 'String'
    street: 'String'
    zipcode: 'String'
  }
  application: { // field return type name
    applicantID: 'ID'
    applicantInterviewer: 'interviewer'
    applicantProfile: 'profile'
    applicantUpload: 'fileUpload'
    applyJobPost: 'JobPost'
    createdAt: 'DateTime'
    email: 'EmailAddress'
    endorseFeedback: 'feedback'
    id: 'String'
    status: 'String'
    updatedAt: 'DateTime'
  }
  comment: { // field return type name
    commentID: 'ID'
    createdAt: 'Date'
    message: 'String'
    notes: 'String'
    updatedAt: 'Date'
    user: 'user'
  }
  company: { // field return type name
    comapnyDetails: 'company_details'
    companyID: 'ID'
    companyName: 'String'
    companyPost: 'JobPost'
    endorse: 'endorse'
    user: 'user'
  }
  company_details: { // field return type name
    company: 'company'
    companyDetailsID: 'ID'
    location: 'address'
    mission: 'String'
    vission: 'String'
  }
  countByGroup: { // field return type name
    _count: 'Int'
    createdAt: 'Date'
  }
  endorse: { // field return type name
    company: 'company'
    createdAt: 'Date'
    endorseID: 'ID'
    endorseStatus: 'String'
    endorsement: 'endorsement'
    feedback: 'feedback'
    user: 'user'
  }
  endorsement: { // field return type name
    Status: 'String'
    applicants: 'application'
    company: 'company'
    createdAt: 'Date'
    endorse: 'endorse'
    endorseBy: 'user'
    endorsementComment: 'comment'
    endorsementID: 'ID'
    updatedAt: 'Date'
  }
  feedback: { // field return type name
    createdAt: 'DateTime'
    endorse: 'endorse'
    feedback: 'String'
    feedbackID: 'ID'
    user: 'user'
  }
  fileUpload: { // field return type name
    createdAt: 'Date'
    file: 'String'
    uploadFileID: 'ID'
    video: 'String'
  }
  interviewer: { // field return type name
    applicants: 'application'
    createdAt: 'Date'
    interviewerID: 'ID'
    user: 'user'
  }
  jobDetails: { // field return type name
    category: 'String'
    jobDetailsID: 'ID'
    jobPost: 'JobPost'
    jobType: 'String'
    location: 'String'
    salary: 'String'
    workType: 'String'
  }
  logs: { // field return type name
    createdAt: 'DateTime'
    logsID: 'ID'
    modifiedBy: 'String'
    title: 'String'
    users: 'user'
  }
  notification: { // field return type name
    createdAt: 'Date'
    notificationID: 'ID'
    notificationJob: 'JobPost'
    notificationStatus: 'String'
    title: 'String'
    user: 'user'
    userApplications: 'application'
  }
  otp: { // field return type name
    OTPID: 'ID'
    createdAt: 'DateTime'
    expiredAt: 'DateTime'
    otp: 'String'
  }
  profile: { // field return type name
    birthday: 'Date'
    firstname: 'String'
    lastname: 'String'
    phone: 'PhoneNumber'
    profileAddress: 'address'
    profileID: 'ID'
    user: 'user'
  }
  screening: { // field return type name
    applicantInterviewed: 'application'
    screeningID: 'ID'
  }
  token: { // field return type name
    token: 'String'
  }
  user: { // field return type name
    company: 'company'
    createdAt: 'DateTime'
    email: 'EmailAddress'
    endorsement: 'endorsement'
    logs: 'logs'
    notification: 'notification'
    profile: 'profile'
    role: 'String'
    updatedAt: 'DateTime'
    userID: 'ID'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    changePin: { // args
      pin: string; // String!
      rePin: string; // String!
      userID: string; // ID!
    }
    createAFeedback: { // args
      applicantID: string; // ID!
      endorseID: string; // ID!
      feedback: string; // String!
      userID: string; // ID!
    }
    createAJobForAMM: { // args
      JobDetails?: NexusGenInputs['jobDetailsInput'] | null; // jobDetailsInput
      JobPost?: NexusGenInputs['JobPostInput'] | null; // JobPostInput
      userID: string; // ID!
    }
    createAJobForRecruiter: { // args
      JobDetails?: NexusGenInputs['jobDetailsInput'] | null; // jobDetailsInput
      JobPost?: NexusGenInputs['JobPostInput'] | null; // JobPostInput
      userID: string; // ID!
    }
    createAccount: { // args
      Profile?: NexusGenInputs['ProfileInput'] | null; // ProfileInput
      auth?: NexusGenInputs['AuthInput'] | null; // AuthInput
      companyName?: string | null; // String
      role: string; // String!
    }
    createAdministrator: { // args
      Auth?: NexusGenInputs['AuthInput'] | null; // AuthInput
      Profile?: NexusGenInputs['ProfileInput'] | null; // ProfileInput
      companyName: string; // String!
    }
    createApplication: { // args
      Address?: NexusGenInputs['AddressInput'] | null; // AddressInput
      Profile?: NexusGenInputs['ProfileInput'] | null; // ProfileInput
      email: NexusGenScalars['EmailAddress']; // EmailAddress!
      file?: NexusGenScalars['Upload'] | null; // Upload
      jobPostID: string; // ID!
      video?: NexusGenScalars['Upload'] | null; // Upload
    }
    createComment: { // args
      comments?: NexusGenInputs['commentInput'] | null; // commentInput
      endorsementID: string; // ID!
      userID: string; // ID!
    }
    createEndorse: { // args
      companyID: string; // ID!
      endorsementID: string; // ID!
      userID: string; // ID!
    }
    createInterviewer: { // args
      applicantID: string; // ID!
      userID: string; // ID!
    }
    createLogs: { // args
      userID: string; // ID!
    }
    createOTP: { // args
      email: NexusGenScalars['EmailAddress']; // EmailAddress!
    }
    createScreening: { // args
      applicantID: string; // ID!
      end: string; // String!
      start: string; // String!
      userID: string; // ID!
    }
    deleteComment: { // args
      commentID: string; // ID!
    }
    deleteCompany: { // args
      companyID: string; // ID!
    }
    deleteJobPost: { // args
      jobPostID: string; // ID!
    }
    deleteUser: { // args
      userID: string; // ID!
    }
    generateApplicantCSV: { // args
      end: string; // String!
      order: string; // String!
      start: string; // String!
      status: string; // String!
    }
    getDetailsFitlerAndSorting: { // args
      category?: string | null; // String
      jobType?: string | null; // String
      location?: string | null; // String
      workType?: string | null; // String
    }
    getEndorseByCSV: { // args
      end: string; // String!
      orders: NexusGenEnums['orderedBy']; // orderedBy!
      start: string; // String!
      status: string; // String!
      userID?: string | null; // ID
    }
    getEndorsmentByCSV: { // args
      end: string; // String!
      order?: NexusGenEnums['orderedBy'] | null; // orderedBy
      start: string; // String!
      status: string; // String!
    }
    login: { // args
      Auth?: NexusGenInputs['AuthInput'] | null; // AuthInput
      pin: string; // String!
    }
    terminateMyApplication: { // args
      applicantID: string; // ID!
    }
    updateAddressByProfileID: { // args
      Address?: NexusGenInputs['AddressInput'] | null; // AddressInput
      profileID: string; // ID!
    }
    updateAllContentUserProfile: { // args
      Address?: NexusGenInputs['AddressInput'] | null; // AddressInput
      email?: NexusGenScalars['EmailAddress'] | null; // EmailAddress
      profile?: NexusGenInputs['ProfileInput'] | null; // ProfileInput
      userID: string; // ID!
    }
    updateApplicantStatus: { // args
      applicantID: string; // ID!
      status: string; // String!
      userID: string; // ID!
    }
    updateEndorse: { // args
      endorseID: string; // ID!
      endorseStatus: string; // String!
      feedback: string; // String!
      userID: string; // ID!
    }
    updateEndorsement: { // args
      Status: string; // String!
      endorsementID: string; // ID!
    }
    updateJobPost: { // args
      JobDetails?: NexusGenInputs['jobDetailsInput'] | null; // jobDetailsInput
      JobPost?: NexusGenInputs['JobPostInput'] | null; // JobPostInput
      jobPostID: string; // ID!
    }
    updateJobPostStatus: { // args
      jobPostID: string; // ID!
      status?: NexusGenEnums['jobStatus'] | null; // jobStatus
    }
    updateNotificationStatus: { // args
      notificationID: string; // ID!
    }
    updatePassword: { // args
      userID: string; // ID!
    }
    updateProfile: { // args
      Profile?: NexusGenInputs['ProfileInput'] | null; // ProfileInput
      profileID: string; // ID!
    }
    updateUserPassword: { // args
      password: string; // String!
      retype: string; // String!
      userID: string; // ID!
    }
    verifyOTP: { // args
      otp: string; // String!
    }
    viewMyApplication: { // args
      email: NexusGenScalars['EmailAddress']; // EmailAddress!
      id: string; // String!
    }
  }
  Query: {
    getAllJobPost: { // args
      limit: number; // Int!
      offset: number; // Int!
      order: NexusGenEnums['orderedBy']; // orderedBy!
    }
    getApplicantByDWMY: { // args
      end: string; // String!
      start: string; // String!
    }
    getApplicantByID: { // args
      applicationID: string; // ID!
    }
    getApplicationByStatus: { // args
      limit: number; // Int!
      order: NexusGenEnums['orderedBy']; // orderedBy!
      status: string; // String!
    }
    getCompanyById: { // args
      companyID: string; // ID!
    }
    getEmployerCompany: { // args
      limit: number; // Int!
      offset: number; // Int!
    }
    getEndorseByID: { // args
      endorseID: string; // ID!
    }
    getEndorseByStatus: { // args
      limit: number; // Int!
      offset: number; // Int!
      order: NexusGenEnums['orderedBy']; // orderedBy!
      status: string; // String!
      userID: string; // ID!
    }
    getEndorsementByDWMY: { // args
      end: string; // String!
      start: string; // String!
    }
    getEndorsementById: { // args
      endorsementID: string; // ID!
    }
    getEndorsementCommnet: { // args
      endorsementID: string; // ID!
    }
    getEndorsementFeedback: { // args
      endorsementID: string; // String!
    }
    getEndorsementSpecificStatus: { // args
      limit: number; // Int!
      offset: number; // Int!
      order?: NexusGenEnums['orderedBy'] | null; // orderedBy
      status: string; // String!
    }
    getFindMyLocation: { // args
      location?: string | null; // String
    }
    getJobByStatus: { // args
      offset: number; // Int!
      order?: NexusGenEnums['orderedBy'] | null; // orderedBy
      status: string; // String!
      take: number; // Int!
    }
    getJobPostById: { // args
      jobPostID: string; // ID!
    }
    getJobPostDWMY: { // args
      end: string; // String!
      start: string; // String!
    }
    getJobPostSearch: { // args
      search: string; // String!
    }
    getJobRelated: { // args
      category: string; // String!
      limit: number; // Int!
      offset: number; // Int!
    }
    getNotificationID: { // args
      notificationID: string; // ID!
    }
    getSpecificJob: { // args
      category?: string | null; // String
      jobType?: Array<string | null> | null; // [String]
      limit: number; // Int!
      offset: number; // Int!
      workType?: Array<string | null> | null; // [String]
    }
    getUserByID: { // args
      userID: string; // ID!
    }
    getUserByRoles: { // args
      limit: number; // Int!
      offset: number; // Int!
      order?: NexusGenEnums['orderedBy'] | null; // orderedBy
      role?: string | null; // String
    }
    getUserLogs: { // args
      limit: number; // Int!
      offset: number; // Int!
      userID: string; // ID!
    }
    profileQuery: { // args
      userID: string; // ID!
    }
    searchApplicantID: { // args
      limit: number; // Int!
      offset: number; // Int!
      order: NexusGenEnums['orderedBy']; // orderedBy!
      search: string; // String!
      status: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
}